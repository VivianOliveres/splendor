syntax = 'proto3';

package com.kensai.splendor.model.protobuf;

///////////
// Model //
///////////

enum Gem {
  Gold = 0;
  Ruby = 1;
  Sapphire = 2;
  Emerald = 3;
  Onyx = 4;
  Diamond = 5;
}

message GemCount {
  Gem gem = 1;
  int32 count = 2;
}

message Noble {
  string name = 1;
  repeated GemCount costs = 2;
  int32 winningPoints = 3;
}

message Card {
  int32 tierList = 1;
  int32 winningPoints = 2;
  repeated GemCount costs = 3;
  Gem valueType = 4;
}

message Player {
  string id = 1;
  string name = 2;
  int32 playerNumber = 3;
  repeated Noble nobles = 5;
  repeated Card cards = 6;
  repeated Card reservedCards = 7;
  repeated GemCount coins = 8;
}

message Board {
  int64 gameId = 1;
  int32 turnNumber = 2;
  int32 playersToPlay = 3;
  repeated GemCount coins = 4;
  repeated Card displayedCards1 = 5;
  repeated Card hiddenCards1 = 6;
  repeated Card displayedCards2 = 7;
  repeated Card hiddenCards2 = 8;
  repeated Card displayedCards3 = 9;
  repeated Card hiddenCards3 = 10;
  repeated Noble nobles = 11;
  repeated Player players = 12;
}

//////////////
// Requests //
//////////////

message DoNothing {
}

message Take3Gems {
  Gem gem1 = 2;
  optional Gem gem2 = 3;
  optional Gem gem3 = 4;
}

message Take2Gems {
  Gem gem = 2;
}

message ReserveCard {
  Card card = 2;
}

message BuyCard {
  Card card = 2;
}

message PlayerAction {
  int32 playerNumber = 1;
  DoNothing doNothing = 2;
  Take3Gems take3Gems = 3;
  Take2Gems Take2Gems = 4;
  ReserveCard reserveCard = 5;
  BuyCard buyCard = 6;
}

message InvalidAction {
  int32 playerNumber = 1;
  string message = 2;
}

///////////////
// Responses //
///////////////

message GameResponse {
  NewTurn newTurn = 1;
  PlayerWon playerWon = 2;
}

message NewTurn {
  Board board = 1;
}

message PlayerWon {
  repeated int32 winners = 1;
  Board finalBoard = 2;
}